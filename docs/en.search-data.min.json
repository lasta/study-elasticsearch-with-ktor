[{"id":0,"href":"/study-elasticsearch-with-ktor/elasticsearch/","title":"Elasticsearch","parent":"Study Elasticsearch with Ktor","content":""},{"id":1,"href":"/study-elasticsearch-with-ktor/elasticsearch/setup/install/targz/","title":"tar.gz (Linux, MacOS)","parent":"Installing Elasticsearch","content":"Linux および MacOS 向けの tar.gz アーカイブを用いたインストール手順\n最新安定版の Elasticsearch は Download Elasticsearch にあります。 過去のバージョンは Past Releases page にあります。\nElasticsearch は OpenJDK がバンドルされています。 (GPLv2+CE)\n自前の JVM を利用する場合は、 こちら を確認してください。\n for Linux    Elasticsearch v7.13.1 の例です。\n1 2 3 4 5  wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.13.1-linux-x86_64.tar.gz wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.13.1-linux-x86_64.tar.gz.sha512 shasum -a 512 -c elasticsearch-7.13.1-linux-x86_64.tar.gz.sha512 # 1. tar -xzf elasticsearch-7.13.1-linux-x86_64.tar.gz cd elasticsearch-7.13.1/ # 2.    elasticsearch-{version}-linux-x86_64.tar.gz: OK と出力されれば ok このディレクトリが $ES_HOME となる  for MacOS    Elasticsearch v7.13.1 の例です。\n1 2 3 4 5  wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.13.1-darwin-x86_64.tar.gz wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.13.1-darwin-x86_64.tar.gz.sha512 shasum -a 512 -c elasticsearch-7.13.1-darwin-x86_64.tar.gz.sha512 tar -xzf elasticsearch-7.13.1-darwin-x86_64.tar.gz cd elasticsearch-7.13.1/    elasticsearch-{version}-darwin-x86_64.tar.gz: OK と出力されれば ok このディレクトリが $ES_HOME となる  CLI から Elasitcsearch を起動    1  ./bin/elasticsearch   Elasticsearch に同梱されているスクリプトは、配列をサポートするバージョンの bash (4系以降) を必要とし、 /bin/bash で利用できることを前提としています。  Elasticsearch が起動していることの確認    localhost:9200 に HTTP リクエストを送り、期待通りに返却されることを確認します。\n1  curl -X GET \u0026#34;localhost:9200/?pretty\u0026#34;   Docker 版の例ですが、下記と似たようなレスポンスが返却されれば ok です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;name\u0026#34; : \u0026#34;d1c7ea7b50cf\u0026#34;, \u0026#34;cluster_name\u0026#34; : \u0026#34;docker-cluster\u0026#34;, \u0026#34;cluster_uuid\u0026#34; : \u0026#34;Udx0AkrqR8i-TeUcxAQtKQ\u0026#34;, \u0026#34;version\u0026#34; : { \u0026#34;number\u0026#34; : \u0026#34;7.13.1\u0026#34;, \u0026#34;build_flavor\u0026#34; : \u0026#34;default\u0026#34;, \u0026#34;build_type\u0026#34; : \u0026#34;docker\u0026#34;, \u0026#34;build_hash\u0026#34; : \u0026#34;9a7758028e4ea59bcab41c12004603c5a7dd84a9\u0026#34;, \u0026#34;build_date\u0026#34; : \u0026#34;2021-05-28T17:40:59.346932922Z\u0026#34;, \u0026#34;build_snapshot\u0026#34; : false, \u0026#34;lucene_version\u0026#34; : \u0026#34;8.8.2\u0026#34;, \u0026#34;minimum_wire_compatibility_version\u0026#34; : \u0026#34;6.8.0\u0026#34;, \u0026#34;minimum_index_compatibility_version\u0026#34; : \u0026#34;6.0.0-beta1\u0026#34; }, \u0026#34;tagline\u0026#34; : \u0026#34;You Know, for Search\u0026#34; }   -q または --quiet をコマンドラインオプションに指定することで、標準出力 (stdout) へのログ出力を無効化できます。\nデーモン起動    Elasticsearch をデーモンとして起動する場合は、 -d オプションをつけます。 -p オプションでプロセスIDをファイルに記録できます。\nログファイルは $ES_HOME/logs/ 配下に配置されます。 Elasticsearch を停止するには、 pid ファイルに記録されているプロセスIDを指定します。\n1  pkill -F pid   .tar.gz パッケージ版の Elasticsearch には systemd モジュールが含まれていません。 Elasticsearch をサービスとして管理する場合は、代わりに Debian または RPM パッケージを利用してください。  コマンドラインから Elasticsearch を設定する    Elasticsearch はデフォルトで $ES_HOME/config/elasticsearch.yml に記載されている設定を読み込みます。 設定ファイルのフォーマットは Configuring Elasticsearch に説明があります。\n設定ファイルで指定できる設定は、 -E オプションを用いることでコマンドラインでも指定できます。\n1  ./bin/elasticsearch -d -Ecluster.name=my_cluster -Enode.name=node_1   通常、クラスタ全体の設定 (cluster.name など) は elasticsearch.yml で定義します。 ノード固有の設定 (node.name など) はコマンドラインで指定します。  ディレクトリ構成    配布されている圧縮ファイルは、自己完結型です。 すべてのファイルとディレクトリは、アーカイブを解凍したときに作成されるディレクトリである $ES_HOME に含まれています。\nElasticsearch を使い始めるときは別途ディレクトリ等をつくる必要はなく、アンインストールするときは $ES_HOME を削除するだけで完了します。 ただし、あとで重要なデータを誤って削除してしまわないように、 config ディレクトリ、 data ディレクトリ、 logs ディレクトリをデフォルト以外の場所に変更することをおすすめします。\n   種別 説明 デフォルトの場所 設定名     home Elasticsearch のホームディレクトリ または $ES_HOME アーカイブを解凍した場所 $ES_HOME   bin ノードの起動 (elasticsearch) や\nプラグインのインストール (elasticsearch-plugin) などを\n行うためのバイナリスクリプト群 $ES_HOME/bin    conf elasticsearch.yml を始めとした設定ファイル群 $ES_HOME/config $ES_PATH_CONF   data 各 index やノードに割り当てられた shard データ群 $ES_HOME/data path.data   logs ログファイル群 $ES_HOME/logs path.logs   plugins プラグインファイル群\n(各プラグインはサブディレクトリ配下に配置される) $ES_HOME/plugins    repo 共有ファイルシステムのリポジトリの場所 (複数指定可能)\nバックアップ / リストアなどで利用 設定なし path.repo    次のステップ    Elasticsearch のテスト環境が整いました。 一方で、本格的な開発や本番環境を構築する前に、いくつか追加の設定が必要になります。\n Elasticsearch の設定を学ぶ 重要な Elasticsearch の設定 重要なシステムの設定  "},{"id":2,"href":"/study-elasticsearch-with-ktor/elasticsearch/setup/install/","title":"Installing Elasticsearch","parent":"Set up Elasticsearch","content":"参照元ドキュメント : Installing Elasticsearch\n自前のサーバにインストールする方法と、 SaaS を利用する方法があります。\nSaaS (Hosted Elasticsearch)    マネージドの Elasticsearch と Kibana は、 Amazon Web Service 、 Google Cloud Platform 、 Microsoft Azure で利用可能です。\nElasticsearch Service\n自前サーバにインストール    下記のパッケージフォーマットで提供されいてます。\n   Platform format link     Linux, MacOS tar.gz Install Elasticsearch from archive on Linux or MacOS   Windows zip Install Elasticsearch with .zip on Windows    Debian deb Install Elasticsearch with Debian Package    RHEL rpm Install Elasticsearch with RPM    Windows (beta) msi Install Elasticsearch with Windows MSI Installer    Docker  Install Elasticsearch with Docker    Homebrew  Install Elasticsearch on macOS with Homebrew    Puppet  puppet-elasticsearch    Chef  cookbook-elasticsearch    Ansible  ansible-elasticsearch     "},{"id":3,"href":"/study-elasticsearch-with-ktor/ktor/","title":"Ktor","parent":"Study Elasticsearch with Ktor","content":" Ktor official document (1.6.0) Ktor 日本語ドキュメント (1.4.1)  "},{"id":4,"href":"/study-elasticsearch-with-ktor/elasticsearch/setup/","title":"Set up Elasticsearch","parent":"Elasticsearch","content":"参照元ドキュメント : Set up Elasticsearch\nこの章には下記に関する情報があります。\n ダウンロード インストール 起動 設定  サポートされているプラットフォーム    OS や JVM に関する推奨環境は こちら に記載されています。 サポート外の環境でも動作する可能性はあります。\nJava (JVM) バージョン    Elasticsearch は Java で開発されており、各ディストリビューションには JDK メンテナから提供されたバンドル版の OpenJDK (GPLv2+CE) が含まれています。 Elasticsearch のホームディレクトリ配下の jdk ディレクトリに推奨 JVM である OpenJDK が配置されています。\n自前でインストールした JVM を利用する場合は、 Java Home のパスを環境変数 ES_JAVA_HOME に指定してください。 その場合、バンドルされている Java の LTS バージョンを使用することを推奨します。 既知の不具合を含む Java バージョンが指定されている場合、 Elasticsearch は起動しません。 自前でインストールした JVM を使用する場合、バンドルされている JVM のディレクトリは削除して ok です。\n"},{"id":5,"href":"/study-elasticsearch-with-ktor/elasticsearch/quickstart/quickstart/","title":"Quick start","parent":"Elasticsearch","content":"参照元ドキュメント : Official Document - Quick start\nQuick start     Elasticsearch をテスト環境にインストールし実行 Elasticsearch にデータを追加 データを検索およびソート 検索時に構造化されていないコンテンツからフィールドを抽出  Step 1. 起動    Elasticsearch     Docker Desktop を起動 下記を実行  1 2 3  docker network create elastic docker pull docker.elastic.co/elasticsearch/elasticsearch:7.13.1 docker run --name es01-test --net elastic -p 9200:9200 -p 9300:9300 -e \u0026#34;discovery.type=single-node\u0026#34; docker.elastic.co/elasticsearch/elasticsearch:7.13.1   http://localhost:9200/ へアクセスし、 JSON が返却されれば OK です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  { \u0026#34;name\u0026#34;: \u0026#34;187e3cc75202\u0026#34;, \u0026#34;cluster_name\u0026#34;: \u0026#34;docker-cluster\u0026#34;, \u0026#34;cluster_uuid\u0026#34;: \u0026#34;tjZJV2qWQtutpBCruoAUCA\u0026#34;, \u0026#34;version\u0026#34;: { \u0026#34;number\u0026#34;: \u0026#34;7.13.1\u0026#34;, \u0026#34;build_flavor\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;build_type\u0026#34;: \u0026#34;docker\u0026#34;, \u0026#34;build_hash\u0026#34;: \u0026#34;5ca8591c6fcdb1260ce95b08a8e023559635c6f3\u0026#34;, \u0026#34;build_date\u0026#34;: \u0026#34;2021-05-19T22:22:26.081971330Z\u0026#34;, \u0026#34;build_snapshot\u0026#34;: false, \u0026#34;lucene_version\u0026#34;: \u0026#34;8.8.2\u0026#34;, \u0026#34;minimum_wire_compatibility_version\u0026#34;: \u0026#34;6.8.0\u0026#34;, \u0026#34;minimum_index_compatibility_version\u0026#34;: \u0026#34;6.0.0-beta1\u0026#34; }, \u0026#34;tagline\u0026#34;: \u0026#34;You Know, for Search\u0026#34; }   Kibana    直感的な UI で Elasticsearch 内のデータを解析、表示、管理するには Kibana を利用します。\n1 2  docker pull docker.elastic.co/kibana/kibana:7.13.1 docker run --name kib01-test --net elastic -p 5601:5601 -e \u0026#34;ELASTICSEARCH_HOSTS=http://es01-test:9200\u0026#34; docker.elastic.co/kibana/kibana:7.13.1   http://localhost:5601/ へアクセスし、 Kibana の UI が表示されれば OK です。\nStep 2. Eleasticsearch にリクエストを送ってみる    CUrl を用いるか、 Kibana の DevTools \u0026gt; Console からリクエストを送ります。\n1  curl -XGET http://localhost:9200/   Step 3. データを追加    JSON オブジェクト形式のドキュメントと呼ばれるデータを Elasticsearch に追加します。 ログやメトリクスなどの時系列データには、 @timestamp フィールドが必要になります。\n単一のドキュメントの追加    logs-my_app-default index に単一のログを投入します。 logs-my_app-default がない場合、ビルトインの logs-*-* index template を用いて自動的に作成されます。\n1 2 3 4 5 6 7  POST logs-my_app-default/_doc{ \u0026#34;@timestamp\u0026#34;: \u0026#34;2099-05-06T16:21:15.000Z\u0026#34;, \u0026#34;event\u0026#34;: { \u0026#34;original\u0026#34;: \u0026#34;192.0.2.42 - - [06/May/2099:16:21:15 +0000] \\\u0026#34;GET /images/bg.jpg HTTP/1.0\\\u0026#34; 200 24736\u0026#34; }}  レスポンスとして、 Elasticsearch が生成したドキュメントのメタデータが返却されます。\n ドキュメントが保持される backing _index  Elasticsearch は backing index の名前を自動的に生成する   インデックス内のドキュメントのユニークな _id  1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;,  \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;8yp6zHkBfubf8FpwI40r\u0026#34;,  \u0026#34;_version\u0026#34; : 1, \u0026#34;result\u0026#34; : \u0026#34;created\u0026#34;, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 2, \u0026#34;successful\u0026#34; : 1, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;_seq_no\u0026#34; : 0, \u0026#34;_primary_term\u0026#34; : 1 }   複数のドキュメントの追加    1リクエストで複数のドキュメントを追加するには、 bulk API を利用します。 バルクデータは NDJSON (newline-delimited JSON) で表現します。 最終行も含め、各行の末尾は改行文字 (\\n) で終わる必要があります。\n1 2 3 4 5  PUT logs-my_app-default/_bulk{ \u0026#34;create\u0026#34;: { } }{ \u0026#34;@timestamp\u0026#34;: \u0026#34;2099-05-07T16:24:32.000Z\u0026#34;, \u0026#34;event\u0026#34;: { \u0026#34;original\u0026#34;: \u0026#34;192.0.2.242 - - [07/May/2020:16:24:32 -0500] \\\u0026#34;GET /images/hm_nbg.jpg HTTP/1.0\\\u0026#34; 304 0\u0026#34; } }{ \u0026#34;create\u0026#34;: { } }{ \u0026#34;@timestamp\u0026#34;: \u0026#34;2099-05-08T16:25:42.000Z\u0026#34;, \u0026#34;event\u0026#34;: { \u0026#34;original\u0026#34;: \u0026#34;192.0.2.255 - - [08/May/2099:16:25:42 +0000] \\\u0026#34;GET /favicon.ico HTTP/1.0\\\u0026#34; 200 3638\u0026#34; } }  Step 4. 検索    インデックスされたドキュメントは準リアルタイムで検索可能です。 インデックスしたデータストリームを検索するには、 search API を利用します。\n下記は logs-my_app-default 内の前エントリを取得し @timestamp の降順で取得するクエリです。\n1 2 3 4 5 6 7 8 9 10 11  GET logs-my_app-default/_search{ \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: { } }, \u0026#34;sort\u0026#34;: [ { \u0026#34;@timestamp\u0026#34;: \u0026#34;desc\u0026#34; } ]}  デフォルトでは、 hits セクションに検索結果上位10ドキュメントが返却されます。 各 _source には index したオリジナルの JSON オブジェクトが格納されます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64  { \u0026#34;took\u0026#34; : 359, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 1, \u0026#34;successful\u0026#34; : 1, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : { \u0026#34;value\u0026#34; : 3, \u0026#34;relation\u0026#34; : \u0026#34;eq\u0026#34; },  \u0026#34;max_score\u0026#34; : null, \u0026#34;hits\u0026#34; : [ { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;-Cqg5HkBfubf8FpwzI3A\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;_source\u0026#34; : { \u0026#34;@timestamp\u0026#34; : \u0026#34;2099-05-08T16:25:42.000Z\u0026#34;, \u0026#34;event\u0026#34; : { \u0026#34;original\u0026#34; : \u0026#34;\u0026#34;\u0026#34;192.0.2.255 - - [08/May/2099:16:25:42 +0000] \u0026#34;GET /favicon.ico HTTP/1.0\u0026#34; 200 3638\u0026#34;\u0026#34;\u0026#34; }  }, \u0026#34;sort\u0026#34; : [ 4081940742000 ] }, { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;9yqg5HkBfubf8FpwzI28\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;_source\u0026#34; : { \u0026#34;@timestamp\u0026#34; : \u0026#34;2099-05-07T16:24:32.000Z\u0026#34;, \u0026#34;event\u0026#34; : { \u0026#34;original\u0026#34; : \u0026#34;\u0026#34;\u0026#34;192.0.2.242 - - [07/May/2020:16:24:32 -0500] \u0026#34;GET /images/hm_nbg.jpg HTTP/1.0\u0026#34; 304 0\u0026#34;\u0026#34;\u0026#34; }  }, \u0026#34;sort\u0026#34; : [ 4081854272000 ] }, { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;8yp6zHkBfubf8FpwI40r\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;_source\u0026#34; : { \u0026#34;@timestamp\u0026#34; : \u0026#34;2099-05-06T16:21:15.000Z\u0026#34;, \u0026#34;event\u0026#34; : { \u0026#34;original\u0026#34; : \u0026#34;\u0026#34;\u0026#34;192.0.2.42 - - [06/May/2099:16:21:15 +0000] \u0026#34;GET /images/bg.jpg HTTP/1.0\u0026#34; 200 24736\u0026#34;\u0026#34;\u0026#34; }  }, \u0026#34;sort\u0026#34; : [ 4081767675000 ] } ] } }   特定のフィールドの取得    1ドキュメントのサイズが大きい場合、 _source 全体を解析するのはしんどいです。 レスポンスから source を除外するには、 _source パラメータに false を指定します。 その上で、 fields パラメータにて必要なフィールドを指定します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  GET logs-my_app-default/_search{ \u0026#34;query\u0026#34;: { \u0026#34;match_all\u0026#34;: { } }, \u0026#34;fields\u0026#34;: [ \u0026#34;@timestamp\u0026#34; ], \u0026#34;_source\u0026#34;: false, \u0026#34;sort\u0026#34;: [ { \u0026#34;@timestamp\u0026#34;: \u0026#34;desc\u0026#34; } ]}  レスポンスには、ヒットしたドキュメントのフィールドの値が平坦な配列として含まれます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  { \u0026#34;took\u0026#34; : 134, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 1, \u0026#34;successful\u0026#34; : 1, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : { \u0026#34;value\u0026#34; : 3, \u0026#34;relation\u0026#34; : \u0026#34;eq\u0026#34; }, \u0026#34;max_score\u0026#34; : null, \u0026#34;hits\u0026#34; : [ { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;-Cqg5HkBfubf8FpwzI3A\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-08T16:25:42.000Z\u0026#34; ] },  \u0026#34;sort\u0026#34; : [ 4081940742000 ] }, { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;9yqg5HkBfubf8FpwzI28\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-07T16:24:32.000Z\u0026#34; ] },  \u0026#34;sort\u0026#34; : [ 4081854272000 ] }, { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;8yp6zHkBfubf8FpwI40r\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-06T16:21:15.000Z\u0026#34; ] },  \u0026#34;sort\u0026#34; : [ 4081767675000 ] } ] } }   日付範囲での検索    特定の間や IP レンジで検索する場合は、 range クエリを使用します。\n絶対日時指定    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  GET logs-my_app-default/_search{ \u0026#34;query\u0026#34;: { \u0026#34;range\u0026#34;: { \u0026#34;@timestamp\u0026#34;: { \u0026#34;gte\u0026#34;: \u0026#34;2099-05-05\u0026#34;, \u0026#34;lt\u0026#34;: \u0026#34;2099-05-08\u0026#34; } } }, \u0026#34;fields\u0026#34;: [ \u0026#34;@timestamp\u0026#34; ], \u0026#34;_source\u0026#34;: false, \u0026#34;sort\u0026#34;: [ { \u0026#34;@timestamp\u0026#34;: \u0026#34;desc\u0026#34; } ]}  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  { \u0026#34;took\u0026#34; : 18, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 1, \u0026#34;successful\u0026#34; : 1, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : { \u0026#34;value\u0026#34; : 2, \u0026#34;relation\u0026#34; : \u0026#34;eq\u0026#34; }, \u0026#34;max_score\u0026#34; : null, \u0026#34;hits\u0026#34; : [ { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;9yqg5HkBfubf8FpwzI28\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-07T16:24:32.000Z\u0026#34; ] }, \u0026#34;sort\u0026#34; : [ 4081854272000 ] }, { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;8yp6zHkBfubf8FpwI40r\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-06T16:21:15.000Z\u0026#34; ] }, \u0026#34;sort\u0026#34; : [ 4081767675000 ] } ] } }   相対日時指定    日付関数を用いて相対的な時間範囲を定義できます。 下記のクエリで、過去の日付のデータを検索できます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  GET logs-my_app-default/_search{ \u0026#34;query\u0026#34;: { \u0026#34;range\u0026#34;: { \u0026#34;@timestamp\u0026#34;: { \u0026#34;gte\u0026#34;: \u0026#34;now-1d/d\u0026#34;, \u0026#34;lt\u0026#34;: \u0026#34;now/d\u0026#34; } } }, \u0026#34;fields\u0026#34;: [ \u0026#34;@timestamp\u0026#34; ], \u0026#34;_source\u0026#34;: false, \u0026#34;sort\u0026#34;: [ { \u0026#34;@timestamp\u0026#34;: \u0026#34;desc\u0026#34; } ]}  投入済のログには該当するものがないため、空が返却されます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;took\u0026#34; : 9, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 1, \u0026#34;successful\u0026#34; : 1, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : { \u0026#34;value\u0026#34; : 0, \u0026#34;relation\u0026#34; : \u0026#34;eq\u0026#34; }, \u0026#34;max_score\u0026#34; : null, \u0026#34;hits\u0026#34; : [ ] } }   構造化されていない要素からフィードを抽出    検索時に、ログのメッセージなどのような構造化されていない要素から 動的フィールド (Runtime field) を抽出することできます。\nevent.original から動的フィールド source.id を抽出してみます。 レスポンスに含めるには、 fields パラメータにも source.id を指定する必要があります。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  GET logs-my_app-default/_search{ \u0026#34;runtime_mappings\u0026#34;: { \u0026#34;source.ip\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;ip\u0026#34;, \u0026#34;script\u0026#34;: \u0026#34;\u0026#34;\u0026#34; String sourceip = grok(\u0026#39;%{IPORHOST:sourceip} .*\u0026#39;) .extract(doc[\u0026#34;event.original\u0026#34;].value) ?.sourceip; if (sourceip != null) { emit(sourceip); } \u0026#34;\u0026#34;\u0026#34; } }, \u0026#34;query\u0026#34;: { \u0026#34;range\u0026#34;: { \u0026#34;@timestamp\u0026#34;: { \u0026#34;gte\u0026#34;: \u0026#34;2099-05-05\u0026#34;, \u0026#34;lt\u0026#34;: \u0026#34;2099-05-08\u0026#34; } } }, \u0026#34;fields\u0026#34;: [ \u0026#34;@timestamp\u0026#34;, \u0026#34;source.ip\u0026#34; ], \u0026#34;_source\u0026#34;: false, \u0026#34;sort\u0026#34;: [ { \u0026#34;@timestamp\u0026#34;: \u0026#34;desc\u0026#34; } ]}  fields.source.ip として返却されます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  { \u0026#34;took\u0026#34; : 14, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 1, \u0026#34;successful\u0026#34; : 1, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : { \u0026#34;value\u0026#34; : 2, \u0026#34;relation\u0026#34; : \u0026#34;eq\u0026#34; }, \u0026#34;max_score\u0026#34; : null, \u0026#34;hits\u0026#34; : [ { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;9yqg5HkBfubf8FpwzI28\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-07T16:24:32.000Z\u0026#34; ], \u0026#34;source.ip\u0026#34; : [ \u0026#34;192.0.2.242\u0026#34; ]  }, \u0026#34;sort\u0026#34; : [ 4081854272000 ] }, { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;8yp6zHkBfubf8FpwI40r\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-06T16:21:15.000Z\u0026#34; ], \u0026#34;source.ip\u0026#34; : [ \u0026#34;192.0.2.42\u0026#34; ]  }, \u0026#34;sort\u0026#34; : [ 4081767675000 ] } ] } }   クエリの結合    bool クエリを用いることで、複数のクエリ結合することができます。 下記のクエリは、 @timestamp と動的フィールドsource.ip の2つの range クエリを結合しています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  GET logs-my_app-default/_search{ \u0026#34;runtime_mappings\u0026#34;: { \u0026#34;source.ip\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;ip\u0026#34;, \u0026#34;script\u0026#34;: \u0026#34;\u0026#34;\u0026#34; String sourceip = grok(\u0026#39;%{IPORHOST:sourceip} .*\u0026#39;) .extract(doc[ \u0026#34;event.original\u0026#34; ].value) ?.sourceip; if (sourceip != null) { emit(sourceip); } \u0026#34;\u0026#34;\u0026#34; } }, \u0026#34;query\u0026#34;: { \u0026#34;bool\u0026#34;: { \u0026#34;filter\u0026#34;: [ { \u0026#34;range\u0026#34;: { \u0026#34;@timestamp\u0026#34;: { \u0026#34;gte\u0026#34;: \u0026#34;2099-05-05\u0026#34;, \u0026#34;lt\u0026#34;: \u0026#34;2099-05-08\u0026#34; } } }, { \u0026#34;range\u0026#34;: { \u0026#34;source.ip\u0026#34;: { \u0026#34;gte\u0026#34;: \u0026#34;192.0.2.0\u0026#34;, \u0026#34;lte\u0026#34;: \u0026#34;192.0.2.240\u0026#34; } } } ] } }, \u0026#34;fields\u0026#34;: [ \u0026#34;@timestamp\u0026#34;, \u0026#34;source.ip\u0026#34; ], \u0026#34;_source\u0026#34;: false, \u0026#34;sort\u0026#34;: [ { \u0026#34;@timestamp\u0026#34;: \u0026#34;desc\u0026#34; } ]}  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  { \u0026#34;took\u0026#34; : 24, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 1, \u0026#34;successful\u0026#34; : 1, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : { \u0026#34;value\u0026#34; : 1, \u0026#34;relation\u0026#34; : \u0026#34;eq\u0026#34; }, \u0026#34;max_score\u0026#34; : null, \u0026#34;hits\u0026#34; : [ { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;8yp6zHkBfubf8FpwI40r\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-06T16:21:15.000Z\u0026#34; ], \u0026#34;source.ip\u0026#34; : [ \u0026#34;192.0.2.42\u0026#34; ] }, \u0026#34;sort\u0026#34; : [ 4081767675000 ] } ] } }   データの集約    集約を用いることで、データを要約できます。 (メトリクス、統計、その他解析)\n下記のクエリでは動的フィールド http.response.body.bytes を用いて average_response_size を計算し集約しています。 集約は query でヒットしたドキュメントに対してのみ計算されます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  GET logs-my_app-default/_search{ \u0026#34;runtime_mappings\u0026#34;: { \u0026#34;http.response.body.bytes\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;long\u0026#34;, \u0026#34;script\u0026#34;: \u0026#34;\u0026#34;\u0026#34; String bytes = grok(\u0026#39;%{COMMONAPACHELOG}\u0026#39;) .extract(doc[ \u0026#34;event.original\u0026#34; ].value) ?.bytes; if (bytes != null) { emit(Integer.parseInt(bytes)); } \u0026#34;\u0026#34;\u0026#34; } }, \u0026#34;aggs\u0026#34;: { \u0026#34;average_response_size\u0026#34;:{ \u0026#34;avg\u0026#34;: { \u0026#34;field\u0026#34;: \u0026#34;http.response.body.bytes\u0026#34; } } }, \u0026#34;query\u0026#34;: { \u0026#34;bool\u0026#34;: { \u0026#34;filter\u0026#34;: [ { \u0026#34;range\u0026#34;: { \u0026#34;@timestamp\u0026#34;: { \u0026#34;gte\u0026#34;: \u0026#34;2099-05-05\u0026#34;, \u0026#34;lt\u0026#34;: \u0026#34;2099-05-08\u0026#34; } } } ] } }, \u0026#34;fields\u0026#34;: [ \u0026#34;@timestamp\u0026#34;, \u0026#34;http.response.body.bytes\u0026#34; ], \u0026#34;_source\u0026#34;: false, \u0026#34;sort\u0026#34;: [ { \u0026#34;@timestamp\u0026#34;: \u0026#34;desc\u0026#34; } ]}  レスポンスの aggregation オブジェクトに、集約結果が格納されます。 2件ヒットしそれぞれの http.response.body.bytes が 0 と 24736 だったため、集約結果 (平均値) は 12368.0 となりました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  { \u0026#34;took\u0026#34; : 14, \u0026#34;timed_out\u0026#34; : false, \u0026#34;_shards\u0026#34; : { \u0026#34;total\u0026#34; : 1, \u0026#34;successful\u0026#34; : 1, \u0026#34;skipped\u0026#34; : 0, \u0026#34;failed\u0026#34; : 0 }, \u0026#34;hits\u0026#34; : { \u0026#34;total\u0026#34; : { \u0026#34;value\u0026#34; : 2, \u0026#34;relation\u0026#34; : \u0026#34;eq\u0026#34; }, \u0026#34;max_score\u0026#34; : null, \u0026#34;hits\u0026#34; : [ { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;9yqg5HkBfubf8FpwzI28\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-07T16:24:32.000Z\u0026#34; ], \u0026#34;http.response.body.bytes\u0026#34; : [ 0 ] }, \u0026#34;sort\u0026#34; : [ 4081854272000 ] }, { \u0026#34;_index\u0026#34; : \u0026#34;.ds-logs-my_app-default-2021.06.02-000001\u0026#34;, \u0026#34;_type\u0026#34; : \u0026#34;_doc\u0026#34;, \u0026#34;_id\u0026#34; : \u0026#34;8yp6zHkBfubf8FpwI40r\u0026#34;, \u0026#34;_score\u0026#34; : null, \u0026#34;fields\u0026#34; : { \u0026#34;@timestamp\u0026#34; : [ \u0026#34;2099-05-06T16:21:15.000Z\u0026#34; ], \u0026#34;http.response.body.bytes\u0026#34; : [ 24736 ] }, \u0026#34;sort\u0026#34; : [ 4081767675000 ] } ] }, \u0026#34;aggregations\u0026#34; : { \u0026#34;average_response_size\u0026#34; : { \u0026#34;value\u0026#34; : 12368.0 } } }   さらなる検索オプション    他の検索オプションなどは、 共通検索オプション を参照してください。\nStep 5. 後片付け    終わったら、テストデータと index を削除します。\n1  DELETE _data_stream/logs-my_app-default   コンテナの停止、削除、ネットワークの削除     コンテナの停止  1 2  docker stop es01-test docker stop kib01-test   コンテナとネットワークの削除  1 2 3  docker network rm elastic docker rm es01-test docker rm kib01-test   他の話題     データ階層とインデックスライフサイクル管理 (Manage the index lifecycle; ILM) を設定し、時系列データを最大限に活用する  時系列データを Elasticsearch で活用する を参照   Fleet と Elastic Agent を使って、データソースから直接ログやメトリクスを収集し、 Elasticsearch へ送信する  Fleet クイックスタートガイド を参照 (X-Pack 向け)   Kibana を使用して、 Elasticsearch のデータの探索、可視化、管理を行う  Kibana クイックスタートガイド を参照    次    Elasticsearch のセットアップ\n"},{"id":6,"href":"/study-elasticsearch-with-ktor/","title":"Study Elasticsearch with Ktor","parent":"","content":"注意\n本ページは Elasticsearch と Ktor に関する個人的なメモです。 前提知識が必要であったり不正確な和訳が含まれていたり、情報が古い場合があります。\n最新の正確な情報は公式ドキュメントを参照してください。\n Elasticsearch Ktor   対応バージョン     Elasticsearch 7.13.1 Ktor 1.6.0  "},{"id":7,"href":"/study-elasticsearch-with-ktor/categories/","title":"Categories","parent":"Study Elasticsearch with Ktor","content":""},{"id":8,"href":"/study-elasticsearch-with-ktor/tags/","title":"Tags","parent":"Study Elasticsearch with Ktor","content":""}]